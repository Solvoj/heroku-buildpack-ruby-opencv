#!/usr/bin/env bash
# bin/compile_opencv <build-dir> <cache-dir>

# fail fast
set -e

indent() {
  sed -u 's/^/       /'
}

echo "*** Using solvoj ruby-opencv buildpack ***" | indent

build=$1
cache=$2
env=$3

echo "Running with build=$build and cache=$cache" | indent

mkdir -p $build
mkdir -p $cache

cmake_version="2.8.12.2"
cmake_url="https://www.cmake.org/files/v2.8/cmake-${cmake_version}.tar.gz"
cmake_file="cmake-${cmake_version}.tar.gz"
cmake_tar_dir="cmake-${cmake_version}"

opencv_version="2.4.13-3"
opencv_dir="opencv-${opencv_version}"
opencv_file="${opencv_dir}.zip"
opencv_cache="${opencv_dir}.tar.gz"
opencv_url="http://download.solvoj.com/bin/opencv-ubuntu-amd64-${opencv_version}.zip"

cache_target=${cache}/${cmake_file}
build_target=${build}/.heroku
target=/app/.heroku

indent() {
  RE="s/^/       /"
  [ $(uname) == "Darwin" ] && sed -l "$RE" || sed -u "$RE"
}

if [ ! -f ${cache_target} ]; then
  echo "No cached compile detected. Building..." | indent
  cd $build

  current=$(pwd)
  echo "Current dir: ${current}" | indent

  echo "Downloading: ${cmake_url} ..." | indent
  curl -L -s ${cmake_url} > ${current}/${cmake_file}

  echo "Uncompressing ${cmake_file}"
  tar -xvzf ${current}/${cmake_file}

  echo "Compiling cmake v${cmake_version}..." | indent
  cd ${cmake_tar_dir}
  ./bootstrap --prefix=${target} | indent
  make | indent
  make install | indent
  cd ..

  tar czf ${cache_target} -C ${target} .
fi

mkdir -p ${build_target}
tar xzf ${cache_target} -C ${build_target}

PATH=${build_target}/bin:$PATH
LD_LIBRARY_PATH=${target}/lib:$LD_LIBRARY_PATH

cache_target=${cache}/${opencv_cache}
build_target=${build}/.heroku

if [ ! -f $cache_target ]; then

  echo "Installing OpenCV libs" | indent
  cd ${build}

  current=$(pwd)
  echo "Current dir: ${current}" | indent

  vendored_opencv="${current}/vendor/opencv"
  mkdir -p $vendored_opencv
  cd ${vendored_opencv}

  current=$(pwd)
  echo "Current dir: ${current}" | indent

  echo "Downloading OpenCV..." | indent
  curl -L -s $opencv_url > ${current}/${opencv_file}
  unzip ${current}/${opencv_file} -d ${vendored_opencv}

  tar czf $cache_target -C $vendored_opencv .
fi

echo "Extracting [$cache_target] to [$build_target]" | indent
mkdir -p $build_target
tar xzf ${cache_target} -C ${build_target}

#mkdir -p ${build}/.profile.d

echo "Build path: $build" | indent
ls -la ${build_target}/*
ls -la ${target}/*

echo "Copying '${build_target}' to '${target}'" | indent
cp -rv ${build_target} ${target}
mkdir -p ${target}/lib
cp -v ${build_target}/lib/* ${target}/lib/
ls -la ${build_target}/*
ls -la ${target}/*

echo "export PATH=${target}/bin:\$PATH" > $build/.profile.d/opencv.sh

opencv_env=${env}/BUNDLE_BUILD__RUBY-OPENCV
if [ ! -f ${opencv_env} ]; then
    echo "--with-opencv-dir=/app/.heroku" > ${opencv_env}
fi

echo "*** CMake and OpenCV installation finished ***" | indent